<program> -> <stm> EOF

<stm> -> var + let id : <var_type> = <expression> \n <stm>
<stm> -> var + let id = <expression> \n <stm>
<stm> -> var + let id : <var_type> \n <stm>
<stm> -> func_id(<func_params>) \n <stm>
<stm> -> id = <expression> \n <stm>
<stm> -> func func_id ( <func_params> ) -> <var_type> { <stm> <return> } \n <stm>
<stm> -> func func_id <func_params> { <stm> <return_void> } \n <stm>
<stm> -> if ( <condition> ) { <stm> } \n <stm>
<stm> -> if ( <condition> ) { <stm> } \n else { <stm> } \n <stm>
<stm> -> while ( <condition> ) { <stm> } \n <stm>
<stm> -> ε

<condition> -> let id
<condition> -> <expression>

<func_params> -> ε
<func_params> -> var_name var_id: <var_type> <func_params_not_null>

<func_params_not_null> -> , <func_params>
<func_params_not_null> -> ε

<var_type> -> String
<var_type> -> Int
<var_type> -> Double
<var_type> -> String?
<var_type> -> Int?
<var_type> -> Double?

<nil_flag> -> ! + ε

<value> -> int_value
<value> -> str_value
<value> -> double_value

<return> -> return <expression> <nil_flag>

<return_void> -> return
<return_void> -> ε